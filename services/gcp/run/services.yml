name: Cloud Run Services 
description: >-
  A Cloud Run service continuously runs code that responds to web requests or events.
  It will automatically scale the number of instances to match incoming requests.
scope: HIGH
notes: >-
  Cloud Run services may be used to run core organizational infrastructure, 
  such as web applications or REST APIs.
privileges:
  create:
    risks: [impact:spend, impact:hijack]
    notes: >-
      Allows creating and deploying a new service on Cloud Run.
      Also requires iam.serviceAccounts.actAs on the Cloud Run service account
  createTagBinding:
    risks: [impact:access, escalation:privilege]
    notes: >-
      A common use case of tag bindings is for use in IAM policy conditions. The
      risks apply if the tag is used in any policies.
  delete:
    risks: [impact:dos, destruction:infra]
    notes: >-
      Deleting a service is permanent: it cannot be undone or restored.
  deleteTagBinding:
    risks: [escalation:privilege, destruction:policy, impact:access]
    notes: >-
      A common use case of tag bindings is for use in IAM policy conditions. The
      risks apply if the tag is used in any policies.
  get:
    risks: [discovery:infra, discovery:policy]
    notes: >-
      Includes ingress and egress network policies for the service.
  getIamPolicy:
    risks: [discovery:policy, discovery:account]
  list:
    risks: [discovery:infra, discovery:policy]
    notes: >-
      Includes ingress and egress network policies for the service.
  listEffectiveTags:
    risks: [discovery:policy]
  listTagBindings:
    risks: [discovery:policy]
  setIamPolicy:
    risks: [escalation:privilege, impact:access, destruction:policy]
  update:
    risks: [impact:spend, impact:dos, impact:hijack, impact:manipulation, exfiltration:data, escalation:network, destruction:defense]
    notes: >- 
      Allows an attacker to update settings for a service, including CPU/memory limits, autoscaling settings, 
      the values of environment variables, the container entrypoint command and arguments, and egress/ingress network policy settings.
      Depending on the job and the contents of environment variables and arguments, this may 
      allow the attacker to hijack the job for their own purposes, manipulate organizational data, 
      or store output data in a location accessible to the attacker.
      Changing ingress/egress network policies can allow an attacker to make private services public or vice versa.
      Changing CPU/memory limits or autoscaling settings can incur spend, 
      and changing autoscaling settings, network settings, or manipulating arguments/environment variables can create a DOS. 

links: 
  - https://cloud.google.com/run/docs/resource-model
  - https://cloud.google.com/run/docs/deploying
  - https://cloud.google.com/run/docs/managing/services
  - https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services