name: Kubernetes Engine StatefulSets
description: >-
  Control Kubernetes StatefulSets objects in a given cluster.
scope: CRITICAL
notes: >-
  StatefulSets manage Pods, with different guarantees but similar to Deployments, ReplicaSets,
  and DaemonSets. As such, the primary security concerns are the container images that are
  running on these Pods, and the resources the Pods consume from the Kubernetes cluster.
privileges:
  create:
    risks:
      - impact:spend
      - impact:hijack
      - escalation:lateral
      - escalation:network
      - exfiltration:data
    notes: >-
      Creation of StatefulSets allows running an image inside the Kubernetes cluster. This may allow arbitrary code
      execution, if the cluster has access to the public internet. Secondly, creating StatefulSets drains the limited 
      resources available to other Kubernetes workloads. Persistent volumes may be attached to the Pods, which may provide access
      to sensitive data.
  delete:
    risks:
      - destruction:infra
      - destruction:data
      - destruction:logs
    notes: >-
      Deleting a DaemonSets deletes its pods and ephemeral volumes. Persistent Volumes are retained.
      Logs of the deleted pods disappear permanently when the pods shut down, unless they are exported to
      an external system for persistence.
  get:
    risks:
      - discovery:infra
      - discovery:network
    scope: MEDIUM
    notes: >-
      Describes detailed metadata about the StatefulSet, and Pods and Containers in it,
      such as ports, IP address, replicas, attached volumes, containers and the images
      they are running.
  getScale:
    risks:
      - discovery:infra
    scope: LOW
    notes: >-
      Allows reading the `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale` subresource
      which returns the number of desired replicas in the StatefulSet. The `container.statefulSets.get`
      permission already includes the ability to read this subresource.
  getStatus:
    risks:
      - discovery:infra
      - discovery:network
    scope: MEDIUM
    notes: >-
      Equivalent to `container.statefulSets.get`. Allows reading the `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status`
      subresource which returns the same payload as the `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}` resource.
  list:
    risks:
      - discovery:infra
      - discovery:network
    scope: MEDIUM
    notes: >-
      Allows listing all StatefulSets in a namespace.
  update:
    risks:
      - destruction:data
      - destruction:infra
      - destruction:network
      - escalation:lateral
      - escalation:network
      - exfiltration:data
      - impact:hijack
      - impact:spend
    notes: >-
      An update may set the replica count to 0 which effectively deletes the application. An update may also let an attacker
      change the container image that is running inside pods, potentially leading to a complete takeover of the Kubernetes cluster.
      Secondly, increasing the replica count in StatefulSets may cause disruption to stateful services, depending on the behavior of
      the stateful service in a scaling event. Scaling may drain the limited resources available to other Kubernetes workloads.
      Also, persistent volumes may be attached to the Pods, which may provide access to sensitive data.
  updateScale:
    risks:
      - destruction:data
      - destruction:infra
      - impact:hijack
      - impact:spend
    notes: >-
      If properties other than replicas are updated in the PATCH request, those are quietly ignored. 
      Secondly, increasing the replica count in StatefulSets may disrupt stateful service and/or drain the limited resources 
      available to other Kubernetes workloads.
  updateStatus:
    risks: []
    notes: >-
      This subresource has no effect on the actual StatefulSets.
