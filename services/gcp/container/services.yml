name: Kubernetes Engine Services
description: >-
  Exposes
scope: CRITICAL
notes: >-
  Services control how your Kubernetes Pods are exposed on the Kubernetes network.
privileges:
  create:
    vulnerabilities:
      - escalation:network
    notes: >-
      Services open up communication to your pods from other Kubernetes workloads. Depending on other
      settings in the Kubernetes cluster and the presence of ingress controllers, it may allow public exposure as well.
  delete:
    vulnerabilities:
      - destruction:network
    notes: >-
      Deleting a service may disrupt communication to Pods, taking down an application completely.
  get:
    vulnerabilities:
      - discovery:network
    scope: MEDIUM
    notes: >-
      Retrieve status information such as Pod selector, IP (virtual), port. Additionally, load-balancer information
      is returned, if any: public IP, port, host name.
    links:
      - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#loadbalancerstatus-v1-core
  getStatus:
    vulnerabilities:
      - discovery:network
    scope: MEDIUM
    notes: >-
      While this is a different permission from `container.services.get`, calling the `GET api/v1/namespaces/default/services/{{service-name}}/status`
      endpoint retrieves the same information as the `GET api/v1/namespaces/default/services/{{service-name}}` endpoint.
  list:
    vulnerabilities:
      - discovery:network
    scope: MEDIUM
    notes: >-
      List all services and their description to the same detail as the `GET api/v1/namespaces/default/services/{{service-name}}` endpoint.
  proxy:
    vulnerabilities:
      - escalation:lateral
      - escalation:network
      - exfiltration:data
      - impact:manipulation
    notes: >-
      Allows an attacker to interact with your application as if they were inside the Kubernetes cluster.
      Creates a proxy server or between localhost and a specified service running on Kubernetes. This service
      can be a kube-system service started by Kubernetes and retrieved by the `kubectl cluster-info` command
      or a user-defined Service object. The resulting proxy allows sending payloads to the targeted Service which
      otherwise would be unreachable. This is different from the `kubectl proxy` command which creates a proxy for 
      the Kubernetes API server - this endpoint acts like a bastion and exposes the user-defined application endpoints 
      of a Service.
    links:
      - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#create-connect-proxy-service-v1-core
      - https://kubernetes.io/docs/concepts/cluster-administration/proxies/
  update:
    vulnerabilities:
      - destruction:network
      - escalation:network
    notes: >-
      Modifying a Service may render Pods unreachable to other Kubernetes workloads or establish new connections to Pods.
  updateStatus:
    vulnerabilities:
      - discovery:network
    scope: MEDIUM
    notes: >-
      Updating the status metadata has no effect on the actual status of the Service. Services are managed by controllers.
      However, the response returns the entire Service object, with the same information as the `GET api/v1/namespaces/default/services/{{service-name}}`
      endpoint, allowing discovery of Service parameters.
